--- ../src/com/darshancomputing/BatteryIndicatorPro/Predictor.java	2012-08-13 18:54:17.258075878 -0700
+++ Predictor.java	2012-08-13 18:47:30.722072512 -0700
@@ -1,21 +1,3 @@
-/*
-    Copyright (c) 2012 Josiah Barber (aka Darshan)
-
-    This program is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-*/
-
-package com.darshancomputing.BatteryIndicatorPro;
-
-import android.content.SharedPreferences;
-
 import java.util.LinkedList;
 
 public class Predictor {
@@ -38,25 +20,24 @@
     private double ave_recharge;
     private LinkedList<Double> recent;
 
-    private static final int KEY_AVE_DISCHARGE = 0;
-    private static final int KEY_AVE_RECHARGE  = 1;
-
     private long last_ms;
     private int last_level;
     private int last_status;
     private int last_plugged;
 
-    private SharedPreferences sp_store;
-    private SharedPreferences.Editor editor;
+    private long extra_ms;
 
-    public Predictor() {
-        sp_store = context.getSharedPreferences("sp_store", 0);
-        editor = sp_store.edit();
+    public void passTime(long ms) {
+        extra_ms += ms;
+    }
+
+    private long now() {
+        return System.currentTimeMillis() + extra_ms;
+    }
 
-        ave_discharge = sp_store.getDouble(KEY_AVE_DISCHARGE, DEFAULT_DISCHARGE);
-        ave_recharge  = sp_store.getDouble(KEY_AVE_RECHARGE,  DEFAULT_RECHARGE);
-        //ave_discharge = DEFAULT_DISCHARGE;
-        //ave_recharge = DEFAULT_RECHARGE;
+    public Predictor() {
+        ave_discharge = DEFAULT_DISCHARGE;
+        ave_recharge = DEFAULT_RECHARGE;
         recent = new LinkedList<Double>();
 
         for (int i = 0; i < RECENT_SIZE; i++) {
@@ -66,15 +47,18 @@
 
     public void update(int level, int status, int plugged) {
         if (last_ms == 0 || status == STATUS_FULLY_CHARGED || status != last_status) {
+            //System.out.println("!! Early return.");
             setLasts(level, status, plugged);
             return;
         }
 
         if (status == STATUS_UNPLUGGED) {
             int level_diff = last_level - level;
-            double ms_diff = (double) (System.currentTimeMillis() - last_ms);
+            double ms_diff = (double) (now() - last_ms);
             ms_diff /= level_diff;
 
+            //System.out.println("ms_diff = " + ms_diff);
+
             for (int i = 0; i < level_diff; i++) {
                 double sum = 0;
                 int n_replaced = 0;
@@ -85,13 +69,12 @@
                 } while (ms_diff > sum + recent.peekFirst() && n_replaced <= MAX_RECENT_REPLACED);
 
                 ave_discharge = ave_discharge * WEIGHT_OLD_AVERAGE + ms_diff * WEIGHT_NEW_DATA;
-                editor.putDouble(KEY_AVE_DISCHARGE, ave_discharge);
             }
         }
 
         if (status == STATUS_CHARGING) {
             double level_diff = (double) (level - last_level);
-            double ms_diff = (double) (System.currentTimeMillis() - last_ms);
+            double ms_diff = (double) (now() - last_ms);
             ms_diff /= level_diff;
 
             if (last_plugged == PLUGGED_USB) ms_diff /= 2;
@@ -101,11 +84,11 @@
                 recent.addLast(ave_discharge);
 
                 ave_recharge = ave_recharge * WEIGHT_OLD_AVERAGE + ms_diff * WEIGHT_NEW_DATA;
-                editor.putDouble(KEY_AVE_RECHARGE, ave_recharge);
             }
         }
 
-        editor.commit();
+        //System.out.println("~~ave_discharge = " + ave_discharge + "; ave_recharge = " + ave_recharge);
+        //System.out.println("~~" + recent);
         setLasts(level, status, plugged);
     }
 
@@ -114,6 +97,8 @@
             return -1;
         }
 
+        //System.out.println("recentAverage() = " + recentAverage());
+
         double ms_remaining = (recentAverage() * WEIGHT_RECENT + ave_discharge * WEIGHT_AVERAGE) * last_level;
         return (int) (ms_remaining / 1000);
     }
@@ -136,7 +121,7 @@
         last_level = level;
         last_status = status;
         last_plugged = plugged;
-        last_ms = System.currentTimeMillis();
+        last_ms = now();
     }
 
     private double recentAverage() {
