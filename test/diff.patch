--- ../src/com/darshancomputing/BatteryIndicatorPro/Predictor.java	2012-08-13 16:35:28.734076322 -0700
+++ Predictor.java	2012-08-13 16:32:57.450075070 -0700
@@ -1,22 +1,3 @@
-/*
-    Copyright (c) 2012 Josiah Barber (aka Darshan)
-
-    This program is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-*/
-
-package com.darshancomputing.BatteryIndicatorPro;
-
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
-
 import java.util.LinkedList;
 
 public class Predictor {
@@ -44,12 +25,17 @@
     private int last_status;
     private int last_plugged;
 
-    private SharedPreferences sp_store;
+    private long extra_ms;
 
-    public Predictor() {
-        sp_store = context.getSharedPreferences("sp_store", 0);
-        SharedPreferences.Editor editor = sp_store.edit();
+    public void passTime(long ms) {
+        extra_ms += ms;
+    }
 
+    private long now() {
+        return System.currentTimeMillis() + extra_ms;
+    }
+
+    public Predictor() {
         ave_discharge = DEFAULT_DISCHARGE;
         ave_recharge = DEFAULT_RECHARGE;
         recent = new LinkedList<Double>();
@@ -67,9 +53,11 @@
 
         if (status == STATUS_UNPLUGGED) {
             int level_diff = last_level - level;
-            double ms_diff = (double) (System.currentTimeMillis() - last_ms);
+            double ms_diff = (double) (now() - last_ms);
             ms_diff /= level_diff;
 
+            //System.out.println("ms_diff = " + ms_diff);
+
             for (int i = 0; i < level_diff; i++) {
                 double sum = 0;
                 int n_replaced = 0;
@@ -85,7 +73,7 @@
 
         if (status == STATUS_CHARGING) {
             double level_diff = (double) (level - last_level);
-            double ms_diff = (double) (System.currentTimeMillis() - last_ms);
+            double ms_diff = (double) (now() - last_ms);
             ms_diff /= level_diff;
 
             if (last_plugged == PLUGGED_USB) ms_diff /= 2;
@@ -98,6 +86,7 @@
             }
         }
 
+        //System.out.println("ave_discharge = " + ave_discharge + "; ave_recharge = " + ave_recharge);
         setLasts(level, status, plugged);
     }
 
@@ -106,6 +95,8 @@
             return -1;
         }
 
+        //System.out.println("recentAverage() = " + recentAverage());
+
         double ms_remaining = (recentAverage() * WEIGHT_RECENT + ave_discharge * WEIGHT_AVERAGE) * last_level;
         return (int) (ms_remaining / 1000);
     }
@@ -128,7 +119,7 @@
         last_level = level;
         last_status = status;
         last_plugged = plugged;
-        last_ms = System.currentTimeMillis();
+        last_ms = now();
     }
 
     private double recentAverage() {
